@page "/Links"
@using LinkApp.Models 
    <button hx-get="/add-link2" hx-target="#LinkList" hx-swap="beforeend">Add New Url</button>
<div hx-get="/hello" hx-target="#response-body">
    <button class="btn">Click me</button>
</div>

<div id="response-body">
</div>

<ul id="LinkList">
    @foreach (var link in links)
    {
        
    }
</ul>

<div id="response-form">
</div>
@code {
    private List<LinkData> links = new();
    private string? newUrl;
    private string? newTitle;

    [Inject] private IJSRuntime _js { get; set; }
    private ElementReference Input1;
    private string StyleDisplayNew(string id)
    {
        return id.StartsWith("new-") ? "display: flex;" : "display: none;";
    }
    private string StyleDisplay(string id)
    {
        return id.StartsWith("new-") ? "display: none;" : "display: flex;";
    }
    
    private async Task SubmitUrl(string id)
    {
        await Task.Delay(500);
        foreach (var link in links.Where(x=> x.Id == id))
        {
            link.Title = newTitle;
            link.Url = newUrl;
            
            await _js.InvokeAsync<string>("ToggleEdit", id); 
            link.Id.Replace("new-", "");
            newUrl = string.Empty;
            newTitle = string.Empty;
        }
    }
    private async Task EditUrl(string id)
    {
        await Task.Delay(500);
        foreach (var link in links.Where(x=> x.Id == id))
        {
            link.Title = newTitle;
            link.Url = newUrl;
            
            await _js.InvokeAsync<string>("ToggleEdit", id); 
            link.Id.Replace("new-", "");
            newUrl = string.Empty;
            newTitle = string.Empty;
        }
    }
    private async Task  AddUrl()
    {
        await Task.Delay(500);
        if (!string.IsNullOrWhiteSpace(newUrl))
        {
            var htmlString = new HtmlString();
            
            var url =  htmlString.GetHtml();
            links.Add(new LinkData { Url = url, Title = newTitle });
            newTitle = string.Empty;
            newUrl = string.Empty;
        }
    }
    private async Task NewUrlForm()
    {
        var id = $"new-{Guid.NewGuid().ToString()}"; 
        await Task.Delay(500);
        links.Add(new LinkData { Id = id, Url = "Url PlaceHolder", Title = "Display Title" });
        newTitle = string.Empty;
        newUrl = string.Empty;
        
    }
}